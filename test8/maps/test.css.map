{"version":3,"sources":["_sprite.scss","test.scss"],"names":[],"mappings":"AA2GI,WAtBF,uBAhEoC,CAsFlC,uBAjBF,uCAAuB,CAfvB,UAtD8B,CA0D9B,WA/CwC,CA2EtC,YAtBF,2BArDwC,CA2EtC,YAjBF,uCAAuB,CALvB,2BA1C4B,CAgC5B,UAhCkC,CAoClC,WApCwC,CCpC1C,IACI,gBAAiB,CAJjB,mBAAa,CAAb,YAAa","file":"../src/test.css","sourcesContent":["// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$home-name: 'home';\n$home-x: 0px;\n$home-y: 0px;\n$home-offset-x: 0px;\n$home-offset-y: 0px;\n$home-width: 16px;\n$home-height: 16px;\n$home-total-width: 32px;\n$home-total-height: 32px;\n$home-image: 'images/sprite.png';\n$home: (0px, 0px, 0px, 0px, 16px, 16px, 32px, 32px, 'images/sprite.png', 'home', );\n$home2-name: 'home2';\n$home2-x: 16px;\n$home2-y: 0px;\n$home2-offset-x: -16px;\n$home2-offset-y: 0px;\n$home2-width: 16px;\n$home2-height: 16px;\n$home2-total-width: 32px;\n$home2-total-height: 32px;\n$home2-image: 'images/sprite.png';\n$home2: (16px, 0px, -16px, 0px, 16px, 16px, 32px, 32px, 'images/sprite.png', 'home2', );\n$home3-name: 'home3';\n$home3-x: 0px;\n$home3-y: 16px;\n$home3-offset-x: 0px;\n$home3-offset-y: -16px;\n$home3-width: 16px;\n$home3-height: 16px;\n$home3-total-width: 32px;\n$home3-total-height: 32px;\n$home3-image: 'images/sprite.png';\n$home3: (0px, 16px, 0px, -16px, 16px, 16px, 32px, 32px, 'images/sprite.png', 'home3', );\n$spritesheet-width: 32px;\n$spritesheet-height: 32px;\n$spritesheet-image: 'images/sprite.png';\n$spritesheet-sprites: ($home, $home2, $home3, );\n$spritesheet: (32px, 32px, 'images/sprite.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\r\n  @each $sprite in $sprites {\r\n    $sprite-name: nth($sprite, 10);\r\n    .icon-#{$sprite-name} {\r\n      @include sprite($sprite);\r\n    }\r\n  }\r\n}\r\n","@import \"sprite\";\r\n@include sprites($spritesheet-sprites);\r\n\r\n@mixin flex {\r\n    display: flex;\r\n}\r\n\r\ndiv {\r\n    font-size: 1.1rem;\r\n    @include flex;\r\n}\r\n"]}