//calculates the percentage to mix start and end colors for gradient effect
@function mixcolor($index, $count, $height, $start_color, $end_color:$start_color) {
  @if $end_color !=$start_color {
    @return mix($end_color, $start_color, percentage($index/(($height*2)*$count)));
  }

  @else {
    @return $start_color
  }
}

;

// actual zig zag mixin. large numbers will break it. can be super slow also. seriously, dont use this in production
@mixin zigzag($count, $height, $start_color, $end_color:$start_color) {
  $value: 0 0 0;

  //for each zigzag
  @for $c from 0 through $count - 1 {

    //  zig
    @for $i from 1 through $height {
      $thiscolor: mixcolor((($c*$height*2)+$i), $count, $height, $start_color, $end_color);
      $value: $value, (($c*$height*2)+$i)+px ($i)+px 0 $thiscolor,
    }

    //  zag
    @for $i from 1 through $height {
      $thiscolor: mixcolor((($c*($height*2))+($i*2)), $count, $height, $start_color, $end_color);
      $value: $value, (($c*$height*2)+($height+$i))+px ($height - $i)+px 0 $thiscolor,
    }
  }

  background: $start_color;
  margin-bottom: 30px+$height;
  box-shadow: $value;

  //set the after p-ele to the calculated total width and height
  &::after {
    content: '';
    display: block;
    width: calc(100%+#{$height*2*$count}px);
    height: calc(100%+#{$height}px);
  }
}

.h {
  width: 3px;
  height: 3px;
  border-radius: 50%;
  @include zigzag(20, 10, #14d8cf, #a98de8)
}